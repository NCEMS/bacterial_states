#Snakefile for NCEMS inGEST RNA-seq pipeline designed by Alexis Morrissey (contact on git)

#Getting config information
configfile: "config.yaml"
sample_name = config.get("sample", "sample_unknown")
experiment_name = config.get("experiment", "experiment_unknown")
results_prefix = f"{experiment_name}_results"
annotation_gff = config.get("annotation_gff")
annotation_bed = config.get("annotation_bed")
ref = config.get("ref")
vg_index = config.get("vg_index")
SE = config.get("r2") is None




########################## Single-end Rules
if SE:
    #Trimming and low quality reads removed
    rule fastp_se:
        input:
            r1=config["r1"]
        output:
            r1=temp(f"{results_prefix}/{sample_name}_clean_R1.fastq"),
            html=f"{results_prefix}/fastp/{sample_name}_fastp.html",
            json=f"{results_prefix}/fastp/{sample_name}_fastp.json"
        threads: 12
        shell:
            """
            fastp -i {input.r1} -o {output.r1} \
            -h {output.html} -j {output.json} -w {threads}
            """
    
    #Sequencing QC check
    rule fastqc_se:
        input:
            r1=f"{results_prefix}/{sample_name}_clean_R1.fastq"
        output:
            r1_html=f"{results_prefix}/fastqc/{sample_name}_clean_R1_fastqc.html",
            r1_zip=f"{results_prefix}/fastqc/{sample_name}_clean_R1_fastqc.zip"
        shell:
            "fastqc {input.r1} -o {results_prefix}/fastqc"

    #Contamination check
    rule centrifuge_se:
        input:
            r1 = f"{results_prefix}/{sample_name}_clean_R1.fastq",
        output:
            temp_report = temp(f"{results_prefix}/centrifuge/initial_R1.tsv"),
            temp_reads = temp(f"{results_prefix}/centrifuge/good_read_ids_R1.txt"),
            temp_fastq = temp(f"{results_prefix}/centrifuge/clean_R1_unambiguous.fastq"),
            tsv     = temp(f"{results_prefix}/centrifuge/{sample_name}_clean_R1_output.tsv"),
            report  = f"{results_prefix}/centrifuge/{sample_name}_clean_R1_report.txt",
        params:
            db = "../resources/centrifuge/p_compressed+h+v",
        threads: 12
        shell:
            r"""
            mkdir -p {results_prefix}/centrifuge
            centrifuge -x {params.db} -U {input.r1} -S {output.temp_report} -p {threads} > /dev/null
            #Picking reads with a species assignment
            awk 'NR>1 && $3!=0 && $8==1 {{print $1}}' {output.temp_report} | sort -u > {output.temp_reads}
            awk 'BEGIN {{ while ((getline < "{output.temp_reads}")>0) keep[$1]=1 }} NR%4==1 {{ rid=substr($1,2); keep_read=(rid in keep) }} keep_read {{print}}' {input.r1} > {output.temp_fastq}
            #Rerunning centrifuge on reads that have species assignment (not ambiguous)
            centrifuge -x {params.db} -U {output.temp_fastq} -S {output.tsv} -p {threads} > /dev/null
            centrifuge-kreport -x {params.db} {output.tsv} > {output.report}
            """

    #Alignment with vg
    rule vg_giraffe_se:
        input:
            r1=f"{results_prefix}/{sample_name}_clean_R1.fastq"
        output:
            gam=f"{results_prefix}/vg/{sample_name}.gam"
        params:
            graph=vg_index+".d2.gbz",
            dist=vg_index+".d2.dist",
            min=vg_index+".d2.min"
        threads: 12
        shell:
            """
            vg giraffe -Z {params.graph} -f {input.r1} \
                             -d {params.dist} -m {params.min} -t {threads} -o GAM > {output.gam}
            """
    
    #Surjecting alignments to K-12 for annotation purposes
    rule vg_surject_se:
        input:
            gam=f"{results_prefix}/vg/{sample_name}.gam"
        output:
            bam=f"{results_prefix}/vg/{sample_name}.bam"
        params:
            graph= vg_index + ".d2.gbz",
            ref= ref,
            strip_prefix= "#".join(ref.split("#")[:-1]) + "#"
        threads: 12
        shell:
            """
            vg surject -x {params.graph} -b -p {params.ref} -t {threads} {input.gam} | \
            samtools view -h - | \
            sed 's/{params.strip_prefix}//g' | \
            samtools view -b - > {output.bam}
            """

    #Quanification of read counts
    rule featurecounts_se:
        input:
            bam=f"{results_prefix}/vg/{sample_name}.bam",
            #Will only quanification small RNAs if stranded protocol
            strandedness=f"{results_prefix}/rseqc/{sample_name}_strandedness.txt"
        output:
            counts=temp(f"{results_prefix}/featurecounts/{sample_name}_counts.txt"),
            summary=f"{results_prefix}/featurecounts/{sample_name}_counts.txt.summary",
            temp_gff=temp(f"{results_prefix}/featurecounts/temp_gff")
        shell:
            """
            strand=$(cat {input.strandedness})
            if [ "$strand" -eq 0 ]; then
                grep -v "ncRNA" {annotation_gff} > {output.temp_gff}
                featureCounts -a {output.temp_gff} -o {output.counts} -t gene -g locus_tag -s 0 {input.bam}
            else
                awk -F"\t" 'BEGIN{{OFS="\t"}} $3=="gene" && $9 ~ /gene_biotype=ncRNA/ {{next}} {{if($3=="ncRNA") $3="gene"; print}}' {annotation_gff} > {output.temp_gff}
                featureCounts -a {output.temp_gff} -o {output.counts} -t gene -g Dbxref -s $strand {input.bam}
            fi
            """

else:
    rule fastp_pe:
        input:
            r1=config["r1"],
            r2=config["r2"]
        output:
            r1=temp(f"{results_prefix}/{sample_name}_clean_R1.fastq"),
            r2=temp(f"{results_prefix}/{sample_name}_clean_R2.fastq"),
            html=f"{results_prefix}/fastp/{sample_name}_fastp.html",
            json=f"{results_prefix}/fastp/{sample_name}_fastp.json"
        threads: 12
        shell:
            """
            fastp -i {input.r1} -I {input.r2} \
                -o {output.r1} -O {output.r2} \
                -h {output.html} -j {output.json} -w {threads}
            """

    rule fastqc_pe:
        input:
            r1=f"{results_prefix}/{sample_name}_clean_R1.fastq",
            r2=f"{results_prefix}/{sample_name}_clean_R2.fastq"
        output:
            r1_html=f"{results_prefix}/fastqc/{sample_name}_clean_R1_fastqc.html",
            r1_zip=f"{results_prefix}/fastqc/{sample_name}_clean_R1_fastqc.zip",
            r2_html=f"{results_prefix}/fastqc/{sample_name}_clean_R2_fastqc.html",
            r2_zip=f"{results_prefix}/fastqc/{sample_name}_clean_R2_fastqc.zip"
        shell:
            "fastqc {input.r1} {input.r2} -o {results_prefix}/fastqc"

    rule centrifuge_pe:
        input:
            r1=f"{results_prefix}/{sample_name}_clean_R1.fastq",
            r2=f"{results_prefix}/{sample_name}_clean_R2.fastq"
        output:
            tsv=f"{results_prefix}/centrifuge/{sample_name}_clean_PE_output.tsv",
            kreport=f"{results_prefix}/centrifuge/{sample_name}_clean_PE_kreport.txt",
            report=f"{results_prefix}/centrifuge/{sample_name}_clean_PE_report.txt"
        params:
            db="../resources/centrifuge/p_compressed+h+v"
        threads: 12
        shell:
            """
            mkdir -p {results_prefix}/centrifuge
            centrifuge -x {params.db} -1 {input.r1} -2 {input.r2} -S {output.tsv} -p {threads}
            centrifuge-kreport -x {params.db} {output.tsv} > {output.kreport}
            cp {output.kreport} {output.report}
            """

    rule vg_giraffe_pe:
        input:
            r1=f"{results_prefix}/{sample_name}_clean_R1.fastq",
            r2=f"{results_prefix}/{sample_name}_clean_R2.fastq"
        output:
            gam=f"{results_prefix}/vg/{sample_name}.gam"
        params:
            graph=vg_index + ".d2.gbz",
            dist=vg_index + ".d2.dist",
            min=vg_index + ".d2.min"
        threads: 12
        shell:
            """
            vg giraffe -Z {params.graph} -1 {input.r1} -2 {input.r2} \
                             -d {params.dist} -m {params.min} -t {threads} -o GAM > {output.gam}
            """

    #Surjecting alignments to K-12 for annotation purposes
    rule vg_surject_se:
        input:
            gam=f"{results_prefix}/vg/{sample_name}.gam"
        output:
            bam=f"{results_prefix}/vg/{sample_name}.bam"
        params:
            graph = vg_index + ".d2.gbz",
            ref = ref,
            strip_prefix = "#".join(ref.split("#")[:-1]) + "#"
        threads: 12
        shell:
            """
            vg surject -x {params.graph} -b -p {params.ref} -t {threads} {input.gam} | \
            samtools view -h - | \
            sed 's/{params.strip_prefix}//g' | \
            samtools view -b - > {output.bam}
            """

    rule featurecounts_pe:
        input:
            bam=f"{results_prefix}/vg/{sample_name}.bam",
            strandedness=f"{results_prefix}/rseqc/{sample_name}_strandedness.txt"
        output:
            counts=temp(f"{results_prefix}/featurecounts/{sample_name}_counts.txt"),
            summary=f"{results_prefix}/featurecounts/{sample_name}_counts.txt.summary",
            temp_gff=temp(f"{results_prefix}/featurecounts/temp_gff")
        shell:
            """
            strand=$(cat {input.strandedness})

            if [ "$strand" -eq 0 ]; then
                grep -v "ncRNA" {annotation_gff} > {output.temp_gff}
                featureCounts -a {output.temp_gff} -o {output.counts} -t gene -g locus_tag -s 0 -p {input.bam}
            else
                awk -F"\t" 'BEGIN{{OFS="\t"}} $3=="gene" && $9 ~ /gene_biotype=ncRNA/ {{next}} {{if($3=="ncRNA") $3="gene"; print}}' {annotation_gff} > {output.temp_gff}
                featureCounts -a {output.temp_gff} -o {output.counts} -t gene -g Dbxref -s $strand -p {input.bam}
            fi
            """




#Getting statistics for vg alignment
rule vg_stats:
    input:
        gam=f"{results_prefix}/vg/{sample_name}.gam"
    output:
        txt=f"{results_prefix}/vg/{sample_name}_giraffe.stats.txt"
    #Add time information at end to meet multiqc requirements
    shell:
        """
        mkdir -p {results_prefix}/vg
        vg stats -a {input.gam} > {output.txt}
        echo "Total time: 123 seconds" >> {output.txt}
        echo "Speed: 123 reads/second" >> {output.txt}
        """

#Getting strandedness information for sequencing library
rule rseqc:
    input:
        bam = f"{results_prefix}/vg/{sample_name}.bam"
    output:
        infer_experiment = f"{results_prefix}/rseqc/{sample_name}_infer_experiment.txt",
    shell:
        """
        mkdir -p {results_prefix}/rseqc
        infer_experiment.py -i {input.bam} -r {annotation_bed} > {output.infer_experiment}
        """
        
#Parsing strandedness information for featureCounts
rule parse_strandedness:
    input:
        infer=f"{results_prefix}/rseqc/{sample_name}_infer_experiment.txt"
    output:
        txt=temp(f"{results_prefix}/rseqc/{sample_name}_strandedness.txt")
    shell:
        "python scripts/parse_strandedness.py {input.infer} {output.txt}"


#Annotating the counts files with metadata from NCBI
rule annotate_counts:
    input:
        counts=f"{results_prefix}/featurecounts/{sample_name}_counts.txt"
    output:
        extended=f"{results_prefix}/featurecounts/{sample_name}_counts_extended.tsv",
        clean=f"{results_prefix}/featurecounts/{sample_name}_gene_symbols.tsv"
    shell:
        """
        bash scripts/get_metadata.sh {input.counts} > {output.extended}
        awk 'NR == 1 || $2 != "Geneid"' {output.extended} | cut -f1,4- > {output.clean}
        """
        
#Custom addition to multiqc, have to keep mqc name or it will not be parsed        
rule feature_overlap:
    input:
        bam = f"{results_prefix}/vg/{sample_name}.bam"
    output:
        feature_overlap = f"{results_prefix}/feature_overlap/{sample_name}_feature_overlap_mqc.tsv"
    shell:
        """
        mkdir -p {results_prefix}/feature_overlap
        bash scripts/gene_type.sh {annotation_bed} {input.bam} {output.feature_overlap}
        """


multiqc_inputs = {
    "fastp": f"{results_prefix}/fastp/{sample_name}_fastp.json",
    "fastqc_r1": f"{results_prefix}/fastqc/{sample_name}_clean_R1_fastqc.zip",
    "centrifuge_report": f"{results_prefix}/centrifuge/{sample_name}_clean_R1_report.txt",
    "vg_bam": f"{results_prefix}/vg/{sample_name}.gam",
    "vg_bam": f"{results_prefix}/vg/{sample_name}.bam",
    "vg_stats": f"{results_prefix}/vg/{sample_name}_giraffe.stats.txt",
    "featurecounts": f"{results_prefix}/featurecounts/{sample_name}_counts.txt.summary",
    "rseqc_infer_experiment": f"{results_prefix}/rseqc/{sample_name}_infer_experiment.txt",
    "feature_overlap": f"{results_prefix}/feature_overlap/{sample_name}_feature_overlap_mqc.tsv"
}

if config.get("r2"):
    multiqc_inputs.update({
        "fastqc_r2": f"{results_prefix}/fastqc/{sample_name}_clean_R2_fastqc.zip",
        "centrifuge_report": f"{results_prefix}/centrifuge/{sample_name}_clean_PE_report.txt",
        "centrifuge_output": f"{results_prefix}/centrifuge/{sample_name}_clean_PE_output.tsv",
        "featurecounts": f"{results_prefix}/featurecounts/{sample_name}_counts.txt.summary"
    })

rule multiqc:
    input:
        **multiqc_inputs
    output:
        html=f"{results_prefix}/{sample_name}_multiqc_report.html"
    shell:
        f"multiqc {results_prefix}/ -o {results_prefix} -c scripts/multiqc_config.yaml --filename {sample_name}_multiqc_report.html"


rna_seq_outputs = [
    f"{results_prefix}/fastqc/{sample_name}_clean_R1_fastqc.zip",
    f"{results_prefix}/fastp/{sample_name}_fastp.json",
    f"{results_prefix}/{sample_name}_multiqc_report.html",
    f"{results_prefix}/vg/{sample_name}.gam",
    f"{results_prefix}/vg/{sample_name}.bam",
    f"{results_prefix}/vg/{sample_name}_giraffe.stats.txt",
    f"{results_prefix}/featurecounts/{sample_name}_counts_extended.tsv",
    f"{results_prefix}/featurecounts/{sample_name}_gene_symbols.tsv",
    f"{results_prefix}/rseqc/{sample_name}_strandedness.txt"
]

if config.get("r2"):
    rna_seq_outputs.extend([
        f"{results_prefix}/fastqc/{sample_name}_clean_R2_fastqc.zip"
    ])

rule all:
    input:
        rna_seq_outputs

